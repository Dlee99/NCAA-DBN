import java.io.*;
import java.util.*;

public class statmachine {
    
    public static void main(String[] args) throws IOException {
        for(double wls = .001; wls < 1; wls = wls + .001){
        for(double soss = .001; soss < 1; soss = soss + .001){
        Scanner test = new Scanner(new File("teams.txt"));
        //Scanner test = new Scanner(new File("2015"));
        System.out.println("ROUND OF 64");
        System.out.println();
        Main.tm.clear();
        Main.wl.clear();
        Main.SOS.clear();
        Main.RO64TM.clear();
        Main.RO64NUM.clear();
        Main.RO64SOS.clear();
        Main.RO32TM.clear();
        Main.RO32NUM.clear();
        Main.RO32SOS.clear();
        Main.RO16TM.clear();
        Main.RO16NUM.clear();
        Main.RO16SOS.clear();
        Main.RO8TM.clear();
        Main.RO8NUM.clear();
        Main.RO8SOS.clear();
        Main.RO4TM.clear();
        Main.RO4NUM.clear();
        Main.RO4SOS.clear();
        Main.FinalTM.clear();
        Main.FinalNUM.clear();
        Main.FinalSOS.clear();
        
        while (test.hasNextLine()) {
            String s[] = test.nextLine().split(",");

            tm.add(s[0]);
            wl.add(Double.parseDouble(s[1]));
            SOS.add(Double.parseDouble(s[2]));
            rank64.add(Integer.parseInt(s[3]));


        }
        for (int i = 0; i < tm.size(); i = i + 2) {
            double Corrected1 = wl.get(i) * SOS.get(i), Corrected2 = wl.get(i + 1) * SOS.get(i + 1);
            System.out.println(tm.get(i) + "\t" + tm.get(i + 1) + ":\t" + ZTable.averagep(ZTable.propp(wl.get(i), wl.get(i + 1)), ZTable.sosp(SOS.get(i), SOS.get(i + 1))));
            if (ZTable.averagep(ZTable.propp(wl.get(i), wl.get(i + 1)), ZTable.sosp(SOS.get(i), SOS.get(i + 1))) >= .5) {
                System.out.println(tm.get(i) + "\tWins!");
                RO32TM.add(tm.get(i));
                RO32NUM.add(wl.get(i));
                RO32SOS.add(SOS.get(i));
                rank32.add(rank64.get(i));


            } else {

                System.out.println(tm.get(i + 1) + "\tWins!");
                RO32TM.add(tm.get(i + 1));
                RO32NUM.add(wl.get(i + 1));
                RO32SOS.add(SOS.get(i + 1));
                rank32.add(rank64.get(i+1));

            }

            System.out.println();

        }

        System.out.println("\n\n\n");

        System.out.println("ROUND OF 32");
        for (int i = 0; i < RO32TM.size(); i = i + 2) {
            double Corrected1 = RO32NUM.get(i) * RO32SOS.get(i), Corrected2 = RO32NUM.get(i + 1) * RO32SOS.get(i + 1);
            System.out.println(RO32TM.get(i) + "\t" + RO32TM.get(i + 1) + ":\t" + ZTable.averagep(ZTable.propp(RO32NUM.get(i), RO32NUM.get(i + 1)), ZTable.sosp(RO32SOS.get(i), RO32SOS.get(i + 1))));

            if (ZTable.averagep(ZTable.propp(RO32NUM.get(i), RO32NUM.get(i + 1)), ZTable.sosp(RO32SOS.get(i), RO32SOS.get(i + 1))) >= .5) {
                System.out.println(RO32TM.get(i) + "\tWins!");
                RO16TM.add(RO32TM.get(i));
                RO16NUM.add(RO32NUM.get(i));
                RO16SOS.add(RO32SOS.get(i));
                rank16.add(rank32.get(i));

            } else {
                System.out.println(RO32TM.get(i + 1) + "\tWins!");
                RO16TM.add(RO32TM.get(i + 1));
                RO16NUM.add(RO32NUM.get(i + 1));
                RO16SOS.add(RO32SOS.get(i + 1));
                rank16.add(rank32.get(i+1));

            }
            System.out.println();

        }
        System.out.println("\n\n\n");

        System.out.println("ROUND OF 16 (Sweet 16)");
        for (int i = 0; i < RO16TM.size(); i = i + 2) {
            double Corrected1 = RO16NUM.get(i) * RO16SOS.get(i), Corrected2 = RO16NUM.get(i + 1) * RO16SOS.get(i + 1);
            System.out.println(RO16TM.get(i) + "\t" + RO16TM.get(i + 1) + ":\t" + ZTable.averagep(ZTable.propp(RO16NUM.get(i), RO16NUM.get(i + 1)), ZTable.sosp(RO16SOS.get(i), RO16SOS.get(i + 1))));
            if (ZTable.averagep(ZTable.propp(RO16NUM.get(i), RO16NUM.get(i + 1)), ZTable.sosp(RO16SOS.get(i), RO16SOS.get(i + 1))) >= .5) {
                System.out.println(RO16TM.get(i) + "\tWins!");
                RO8TM.add(RO16TM.get(i));
                RO8NUM.add(RO16NUM.get(i));
                RO8SOS.add(RO16SOS.get(i));
                rank8.add(rank16.get(i));
            } else {
                System.out.println(RO16TM.get(i + 1) + "\tWins!");
                RO8TM.add(RO16TM.get(i + 1));
                RO8NUM.add(RO16NUM.get(i + 1));
                RO8SOS.add(RO16SOS.get(i + 1));
                rank8.add(rank16.get(i+1));

            }
            System.out.println();

        }

        System.out.println("\n\n\n");

        System.out.println("ROUND OF 8 (Elite 8)");
        for (int i = 0; i < RO8TM.size(); i = i + 2) {
            double Corrected1 = RO8NUM.get(i) * RO8SOS.get(i), Corrected2 = RO8NUM.get(i + 1) * RO8SOS.get(i + 1);

            System.out.println(RO8TM.get(i) + "\t" + RO8TM.get(i + 1) + ":\t" + ZTable.averagep(ZTable.propp(RO8NUM.get(i), RO8NUM.get(i + 1)), ZTable.sosp(RO8SOS.get(i), RO8SOS.get(i + 1))));
            if (ZTable.averagep(ZTable.propp(RO8NUM.get(i), RO8NUM.get(i + 1)), ZTable.sosp(RO8SOS.get(i), RO8SOS.get(i + 1))) >= .5) {
                System.out.println(RO8TM.get(i) + "\tWins!");
                RO4TM.add(RO8TM.get(i));
                RO4NUM.add(RO8NUM.get(i));
                RO4SOS.add(RO8SOS.get(i));
                rank4.add(rank8.get(i));

            } else {
                System.out.println(RO8TM.get(i + 1) + "\tWins!");
                RO4TM.add(RO8TM.get(i + 1));
                RO4NUM.add(RO8NUM.get(i + 1));
                RO4SOS.add(RO8SOS.get(i + 1));
                rank4.add(rank8.get(i+1));


            }
            System.out.println();

        }

        System.out.println("\n\n\n");

        System.out.println("ROUND OF 4 (Final 4)");
        for (int i = 0; i < RO4TM.size(); i = i + 2) {
            double Corrected1 = RO4NUM.get(i) * RO4SOS.get(i), Corrected2 = RO4NUM.get(i + 1) * RO4SOS.get(i + 1);
            System.out.println(RO4TM.get(i) + "\t" + RO4TM.get(i + 1) + ":\t" + ZTable.averagep(ZTable.propp(RO4NUM.get(i), RO4NUM.get(i + 1)), ZTable.sosp(RO4SOS.get(i), RO4SOS.get(i + 1))));
            if (ZTable.averagep(ZTable.propp(RO4NUM.get(i), RO4NUM.get(i + 1)), ZTable.sosp(RO4SOS.get(i), RO4SOS.get(i + 1))) >= .5) {
                System.out.println(RO4TM.get(i) + "\tWins!");
                FinalTM.add(RO4TM.get(i));
                FinalNUM.add(RO4NUM.get(i));
                FinalSOS.add(RO4SOS.get(i));
                rank2.add(rank4.get(i));

            } else {
                System.out.println(RO4TM.get(i + 1) + "\tWins!");
                FinalTM.add(RO4TM.get(i + 1));
                FinalNUM.add(RO4NUM.get(i + 1));
                FinalSOS.add(RO4SOS.get(i + 1));
                rank2.add(rank4.get(i+1));


            }
            System.out.println();

        }
        System.out.println("\n\n\n");

        System.out.println("Championship");
        for (int i = 0; i < FinalTM.size(); i = i + 2) {
            double Corrected1 = FinalNUM.get(i) * FinalSOS.get(i), Corrected2 = FinalNUM.get(i + 1) * FinalSOS.get(i + 1);
            System.out.println(FinalTM.get(i) + "\t" + FinalTM.get(i + 1) + ":\t" + ZTable.averagep(ZTable.propp(FinalNUM.get(i), FinalNUM.get(i + 1)), ZTable.sosp(FinalSOS.get(i), FinalSOS.get(i + 1))));
            if (ZTable.averagep(ZTable.propp(FinalNUM.get(i), FinalNUM.get(i + 1)), ZTable.sosp(FinalSOS.get(i), FinalSOS.get(i + 1))) >= .5) {
                System.out.println(FinalTM.get(i) + "\tWins!");
                Winner = FinalTM.get(i);
                rankWinner.add(rank64.get(i));
                break;

            } else {
                System.out.println(FinalTM.get(i + 1) + "\tWins!");
                Winner = FinalTM.get(i);
                rankWinner.add(rank64.get(i+1));
                break;


            }

        }
        System.out.println(right());
        frame = new bracketFrame();
        }
        }
    }
    public static double right() throws FileNotFoundException {
        Scanner right = new Scanner(new File("Right.txt"));
        double sum = 0;
        for (int i = 0; i < RO32TM.size(); i++) {
            if (right.nextLine().equals(RO32TM.get(i))) {
                sum++;
            } else {

            }
        }
        for (int i = 0; i < RO16TM.size(); i++) {
            if (right.nextLine().equals(RO16TM.get(i))) {
                sum++;
            } else {

            }
        }
        for (int i = 0; i < RO8TM.size(); i++) {
            if (right.nextLine().equals(RO8TM.get(i))) {
                sum++;
            } else {

            }
        }
        for (int i = 0; i < RO4TM.size(); i++) {
            if (right.nextLine().equals(RO4TM.get(i))) {
                sum++;
            } else {

            }
        }
        for (int i = 0; i < FinalTM.size(); i++) {
            if (right.nextLine().equals(FinalTM.get(i))) {
                sum++;
            } else {

            }
        }
        if (right.nextLine().equals(Winner))
            sum++;
        return sum / 63.0;
    }
}

